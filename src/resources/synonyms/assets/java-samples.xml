<?xml version="1.0"?>
<synonyms>
<theme id="theme-getting-started">
  <title>Getting started</title>
  <synonym id="syn-code-embedding">
    <title>Code embedding</title>
    <code language="java"><![CDATA[
// Java browser code embedding not supported.

// Loading a GWT module (translated Java to Javascript)
<script type="text/javascript"
    src="program/program.nocache.js"></script>
]]></code>
  </synonym>
  <synonym id="syn-entry-point">
    <title>Entry point</title>
    <code language="java"><![CDATA[
public class Dog {
  public static void main(String[] args) {
    // this is the entry point to the program
  }
}
]]></code>
  </synonym>
  <synonym id="syn-detect-language-unavailability">
    <title>Detect language unavailability</title>
    <code language="java"><![CDATA[
// Java code can not be run directly in the browser.
]]></code>
  </synonym>
  <synonym id="syn-printing-to-the-console">
    <title>Printing to the console</title>
    <code language="java"><![CDATA[
// Using Java
System.out.println("Level completed.");
// Using GWT and logging is on.
GWT.log("Level completed.");
// Using GWT JSNI
public native void log(String message) /*-{
  console.log(message);
}-*/;
]]></code>
  </synonym>
  <synonym id="syn-modal-alerts">
    <title>Modal alerts</title>
    <code language="java"><![CDATA[
import com.google.gwt.user.client.Window;

// Using GWT
Window.alert("Clicked on the button.")
]]></code>
  </synonym>
</theme>
<theme id="theme-code-modularity">
  <title>Code modularity</title>
  <synonym id="syn-define-a-library">
    <title>Define a library</title>
    <code language="java"><![CDATA[
// Package namespace declaration
package animals;

// One class per file
public class Dog {
  public String noise() {
    return "BARK!";
  }
}
]]></code>
  </synonym>
  <synonym id="syn-use-a-library">
    <title>Use a library</title>
    <code language="java"><![CDATA[
// Prepending package to class instantiation
Dog fido = new animals.Dog();

// Package import declaration
import animals;
var fido = new Dog();

// Import aliasing is not supported
]]></code>
  </synonym>
</theme>
<theme id="theme-variables">
  <title>Variables</title>
  <synonym id="syn-create--assign-value">
    <title>Create + assign value</title>
    <code language="java"><![CDATA[
// Explicit type
String myName = "Aaron";

// Non typed variable
Object myName = "Aaron";
]]></code>
  </synonym>
  <synonym id="syn-default-value">
    <title>Default value</title>
    <code language="java"><![CDATA[
String myName;
// == null

int x;
// == 0
]]></code>
  </synonym>
  <synonym id="syn-hoisting">
    <title>Hoisting</title>
    <code language="java"><![CDATA[
// Hoisting is not supported
void printName() {
  // This does not compile
  System.out.println("Hello, " + name);
  String name = "Bob";
}
]]></code>
  </synonym>
  <synonym id="syn-final-variables">
    <title>Final variables</title>
    <code language="java"><![CDATA[
public final class Dog {
  public final String name = "Bob";
  
  public Dog() {
    // This reassignment is not possible and will error
    this.name = "can't reassign this variable";
  }
}
]]></code>
  </synonym>
</theme>
<theme id="theme-collections">
  <title>Collections</title>
  <synonym id="syn-arrays--lists">
    <title>Arrays / Lists</title>
    <code language="java"><![CDATA[
int[] a = new int[5];
String[] b = { "0", "1", "2", "3", "4" };

int size = b.length;

// Generics
List<Integer> a = Arrays.asList(new Integer[]{1, 2});
List<String> d = new ArrayList<String>();
]]></code>
  </synonym>
  <synonym id="syn-custom-sort">
    <title>Custom sort</title>
    <code language="java"><![CDATA[
List<Double> numbers = new ArrayList<Double>();
numbers.add(42D);
numbers.add(2.1);
numbers.add(5D);
numbers.add(0.1);
numbers.add(391D);
    
Collections.sort(numbers, new Comparator<Double>() {
  @Override
  public int compare(Double a, Double b) {
    return a.compareTo(b);
  }
});

System.out.println(numbers); 
// == [0.1, 2.1, 5, 42, 391]; 
]]></code>
  </synonym>
  <synonym id="syn-key-value-pairs">
    <title>Key-value pairs</title>
    <code language="java"><![CDATA[
Map<String, String> periodic = new HashMap<String, String>();
]]></code>
  </synonym>
  <synonym id="syn-appropriate-keys">
    <title>Appropriate keys</title>
    <code language="java"><![CDATA[
Map<String, String> periodic = new HashMap<String, String>();
periodic.put("gold", "AU");
periodic.put("silver", "AG");

// Kid object uses methods equals(Object) and hashCode()
Map<Kid, String> favoriteIceCream = new HashMap<Kid, String>();
favoriteIceCream.put(new Kid("Billy"), "vanilla");
]]></code>
  </synonym>
  <synonym id="syn-accessing-values">
    <title>Accessing values</title>
    <code language="java"><![CDATA[
Map<String, String> periodic = new HashMap<String, String>();
periodic.put("gold", "AU");
periodic.put("silver", "AG");
    
periodic.get("gold"); // AU
periodic.put("gold", "Glitter");

// The HashMap does not have a similiar putIfAbsent
]]></code>
  </synonym>
  <synonym id="syn-sets-collections-of-unique-items">
    <title>Sets (collections of unique items)</title>
    <code language="java"><![CDATA[
Set<String> fruits = new HashSet<String>();
fruits.add("oranges");
fruits.add("apples");
fruits.size(); // == 2

fruits.add("oranges");
fruits.size(); // == 2
]]></code>
  </synonym>
  <synonym id="syn-queues-fifo">
    <title>Queues (FIFO)</title>
    <code language="java"><![CDATA[
Queue<String> queue = new LinkedList<String>();
queue.add("event:32342");
queue.add("event:49309");

System.out.println(queue.size());  // 2

String eventId = queue.remove();

System.out.println(eventId == "event:32342"); // true
System.out.println(queue.size()); // 1
]]></code>
    <code language="java"><![CDATA[
Queue<String> queue = new LinkedList<String>();
queue.add("event:32342");
queue.add("event:49309");

System.out.println(queue.size());  // 2

String eventId = queue.remove();

System.out.println(eventId == "event:32342"); // true
System.out.println(queue.size()); // 1
]]></code>
  </synonym>
</theme>
<theme id="theme-strings">
  <title>Strings</title>
  <synonym id="syn-raw-strings">
    <title>Raw strings</title>
    <code language="java"><![CDATA[
char[] rawString = { 'T', 'h', 'e', ' ', '.', '.', '.', ' ', '\\', 't' };

String escapedString = "The ... \\t";
    
System.out.println(String.valueOf(rawString) == escapedString); // == true
]]></code>
  </synonym>
  <synonym id="syn-interpolation">
    <title>Interpolation</title>
    <code language="java"><![CDATA[
String name = "Aaron";
String greeting = String.format("My name is %s.", name);

String greetingPolish = String.format("My Polish name would be %sski.", name);

int top = 10;
String someProperty = String.format("%spx", (top + 20));
]]></code>
  </synonym>
  <synonym id="syn-concatenation">
    <title>Concatenation</title>
    <code language="java"><![CDATA[
String longMessage = "This is a very long line. "
  + "It is concatenated into one string.";
]]></code>
  </synonym>
  <synonym id="syn-substring">
    <title>Substring</title>
    <code language="java"><![CDATA[
"doghouses".substring(3, 8) // == 'house'
]]></code>
  </synonym>
  <synonym id="syn-replace-all-occurences">
    <title>Replace all occurences</title>
    <code language="java"><![CDATA[
"doghouses".replaceAll("s", "z") // == 'doghouzez'
]]></code>
  </synonym>
  <synonym id="syn-replace-one-occurence">
    <title>Replace one occurence</title>
    <code language="java"><![CDATA[
"racecar".replaceFirst("r", "sp") // == 'spacecar'
]]></code>
  </synonym>
  <synonym id="syn-multi-line-strings">
    <title>Multi-line strings</title>
    <code language="java"><![CDATA[
String string = "";
string += "This is a string that spans";
string += "many lines";
]]></code>
  </synonym>
  <synonym id="syn-split-into-an-array">
    <title>Split into an array</title>
    <code language="java"><![CDATA[
String animals = "dogs, cats, gophers, zebras";
String[] individualAnimals = animals.split(", ");
// == ["dogs", "cats", "gophers", "zebras"];
]]></code>
  </synonym>
  <synonym id="syn-test-whether-a-string-starts-with-a-substring">
    <title>Test whether a string starts with a substring</title>
    <code language="java"><![CDATA[
"racecar".startsWith("race"); // == true
"racecar".startsWith("pace"); // == false
]]></code>
  </synonym>
</theme>
<theme id="theme-booleans">
  <title>Booleans</title>
  <synonym id="syn-if-statements">
    <title>If statements</title>
    <code language="java"><![CDATA[
int[] bugNumbers = {3234,4542,944,124};
if (bugNumbers.length > 0) {
  System.out.println("Not ready for release");
}
]]></code>
  </synonym>
  <synonym id="syn-ternary-statements">
    <title>Ternary statements</title>
    <code language="java"><![CDATA[
int[] bugNumbers = new int[] { 3234, 4542, 944, 124 };
String status = bugNumbers.length > 0 ? "RED" : "GREEN";

System.out.println("The build is " + status);
]]></code>
  </synonym>
  <synonym id="syn-checking-for-empty-string">
    <title>Checking for empty string</title>
    <code language="java"><![CDATA[
String emptyString = "";

if (emptyString.isEmpty()) {
    System.out.println("It's empty");
}
]]></code>
  </synonym>
  <synonym id="syn-checking-for-zero">
    <title>Checking for zero</title>
    <code language="java"><![CDATA[
int zero = 0;

if (zero == 0) {
  System.out.println("is zero");
}

Integer zero2 = 0;

if (zero2.equals(0)) {
  System.out.println("is zero");
}
]]></code>
  </synonym>
  <synonym id="syn-checking-for-null">
    <title>Checking for null</title>
    <code language="java"><![CDATA[
String myNull = null;

if (myNull == null) {
  System.out.println("is null");
}
]]></code>
  </synonym>
  <synonym id="syn-checking-for-nan">
    <title>Checking for NaN</title>
    <code language="java"><![CDATA[
Double nan = Double.NaN;

if (Double.isNaN(nan)) {
    System.out.println("is NaN.");
}
]]></code>
  </synonym>
  <synonym id="syn-checking-for-undefined">
    <title>Checking for undefined</title>
    <code language="java"><![CDATA[
// Java does not have a concept of undefined.
]]></code>
  </synonym>
  <synonym id="syn-value-and-identity-equality">
    <title>Value and identity equality</title>
    <code language="java"><![CDATA[
String letterA = "A";
char charA = 65;

letterA == charA // == false
letterA.equals(String.valueOf(charA)) // == true

int number5 = 5;
String char5 = "5";

number5 == char5 // incompatible type comparision
Integer.toString(number5).equals(char5) // == true

class Person {
  String name;
  String ssn;

  Person(String name, String ssn) {
    this.name = name;
    this.ssn = ssn;
  }
  
  @Override
  public boolean equals(Object obj) {
    Person p = (Person) obj;
    return ssn.equals(p.ssn);
  }
}

new Person("Bob", "111").equals(new Person("Robert", "111") 
// == true
]]></code>
  </synonym>
</theme>
<theme id="theme-functions">
  <title>Functions</title>
  <synonym id="syn-function-definition">
    <title>Function definition</title>
    <code language="java"><![CDATA[
// Java uses methods intead of functions like Javascript and Dart
boolean method() {
  // ...
  return true;
}

void method2() {
  // ...
}
]]></code>
  </synonym>
  <synonym id="syn-return-value">
    <title>Return value</title>
    <code language="java"><![CDATA[
boolean isMethod() {
  return true;
}

TheType getTheTypeMethod() {
  return new TheType();
}

void method() {
  // returns nothing
}
]]></code>
  </synonym>
  <synonym id="syn-assign-a-function-to-a-variable">
    <title>Assign a function to a variable</title>
    <code language="java"><![CDATA[
// Java 1.8
public class LambdaExample {
  interface Loudify {
    String loudify(String msg);
  }

  public static void main(String[] args) {
    Loudify loudify = (String msg) -> msg.toUpperCase();

    System.out.println(loudify.loudify("not gonna take it anymore"));
  }
}
]]></code>
  </synonym>
  <synonym id="syn-optional-parameters">
    <title>Optional parameters</title>
    <code language="java"><![CDATA[
// Java doesn't support optional parameters. 
]]></code>
  </synonym>
  <synonym id="syn-default-parameters">
    <title>Default parameters</title>
    <code language="java"><![CDATA[
// Java does not support default parameters.
]]></code>
  </synonym>
  <synonym id="syn-named-parameters">
    <title>Named parameters</title>
    <code language="java"><![CDATA[
// Java does not support named parameters.
]]></code>
  </synonym>
  <synonym id="syn-variable-number-of-arguments">
    <title>Variable number of arguments</title>
    <code language="java"><![CDATA[
public void method(String... strings) {
}
method("a", "b", "c");
]]></code>
  </synonym>
</theme>
<theme id="theme-iterators">
  <title>Iterators</title>
  <synonym id="syn-for-loops-for-lists">
    <title>For loops for lists</title>
    <code language="java"><![CDATA[
List<String> colors = new ArrayList<String>();
colors.add("red");
colors.add("orange");
colors.add("green");

for (int i = 0; i < colors.size(); i++) {
  System.out.println(colors.get(0));
}
]]></code>
  </synonym>
  <synonym id="syn-for-in-loops">
    <title>For-in loops</title>
    <code language="java"><![CDATA[
List<String> colors = new ArrayList<String>();
colors.add("red");
colors.add("orange");
colors.add("green");

for (String color : colors) {
  System.out.println(color);
}
]]></code>
  </synonym>
  <synonym id="syn-for-loops-for-objectsmaps">
    <title>For loops for objects/maps</title>
    <code language="java"><![CDATA[
Map<String, String> colors = new HashMap<String, String>();
colors.put("1", "red");
colors.put("2", "orange");
colors.put("3", "green");

for (String key : colors.keySet()) {
  System.out.println(key + ", " + colors.get(key));
}

Set<String> colors2 = new HashSet<String>();
colors2.add("red");
colors2.add("orange");
colors2.add("green");

Iterator<String> iterator = colors2.iterator();
while (iterator.hasNext()) {
  System.out.println(iterator.next());
}
]]></code>
  </synonym>
  <synonym id="syn-closures-and-counters-in-loops">
    <title>Closures and counters in loops</title>
    <code language="java"><![CDATA[
// Java 1.8
public class LambdaExample {
  public interface Callback {
    void callback();
  }

  public static void main(String[] args) {
    List<Callback> callbacks = new ArrayList<Callback>();

    for (int i = 0; i < 2; i++) {
      final int ii = i;
      Callback callback = () -> System.out.println(Integer.toString(ii));
      callbacks.add(callback);
    }

    callbacks.get(0).callback(); // == 0
    callbacks.get(1).callback(); // == 1
  }
}
]]></code>
  </synonym>
</theme>
<theme id="theme-classes">
  <title>Classes</title>
  <synonym id="syn-define">
    <title>Define</title>
    <code language="java"><![CDATA[
public class Person {
  private String name;

  public String greet() {
    return String.format("Hello, %s", name);
  }
}
]]></code>
  </synonym>
  <synonym id="syn-constructor-with-parameter">
    <title>Constructor with parameter</title>
    <code language="java"><![CDATA[
public class Person {
  private String name;

  public Person(String name) {
    this.name = name;
  }
}
]]></code>
  </synonym>
  <synonym id="syn-instantiate">
    <title>Instantiate</title>
    <code language="java"><![CDATA[
Person person = new Person();
]]></code>
  </synonym>
  <synonym id="syn-reflection">
    <title>Reflection</title>
    <code language="java"><![CDATA[
Person person = new Person("a");
System.out.println(person.getClass().getSimpleName()); 
// == Person
]]></code>
  </synonym>
  <synonym id="syn-check-the-type">
    <title>Check the type</title>
    <code language="java"><![CDATA[
String name = "Bob";

System.out.println(name instanceof String); // == true
]]></code>
  </synonym>
  <synonym id="syn-subclass">
    <title>Subclass</title>
    <code language="java"><![CDATA[
public class Person {
  private String name;

  public Person(String name) {
    this.name = name;
  }

  public String greet() {
    return "Hello, " + name;
  }
}

public class Employee extends Person {
  private int salary;

  public Employee(String name, int salary) {
    super(name);
    this.salary = salary;
  }

  public void grantRaise(double percent) {
    percent /= 100;
    salary += (salary * percent);
  }

  public int getSalary() {
    return salary;
  }
}
]]></code>
  </synonym>
  <synonym id="syn-operator-overloading">
    <title>Operator &quot;overloading&quot;</title>
    <code language="java"><![CDATA[
// Java does not support operator overloading.
]]></code>
  </synonym>
</theme>
<theme id="theme-finding-elements-in-dom">
  <title>Finding elements in DOM</title>
  <synonym id="syn-find-one-element-by-id">
    <title>Find one element by id</title>
    <code language="java"><![CDATA[
// Using GWT
DOM.getElementById("main");
// Using GWT with GXT
DomQuery.select("#main").getItem(0);
// Using GWT with GQuery
GQuery.$("#main").get(0);
]]></code>
  </synonym>
  <synonym id="syn-find-one-element-by-class">
    <title>Find one element by class</title>
    <code language="java"><![CDATA[
// Using GWT with GXT
DomQuery.select(".visible").getItem(0);
// Using GWT with GQuery
GQuery.$(".visible").get(0);
]]></code>
  </synonym>
  <synonym id="syn-find-many-elements-by-class">
    <title>Find many elements by class</title>
    <code language="java"><![CDATA[
// Using GWT with GXT
DomQuery.select(".visible");
// Using GWT with GQuery
GQuery.$(".visible");
]]></code>
  </synonym>
  <synonym id="syn-find-one-element-by-tag">
    <title>Find one element by tag</title>
    <code language="java"><![CDATA[
// Using GWT
Document.get().getElementsByTagName("div").getItem(0);
// Using GWT with GXT
DomQuery.select("div").getItem(0);
// Using GWT with GQuery
GQuery.$("div").get(0);
]]></code>
  </synonym>
  <synonym id="syn-find-many-elements-by-tag">
    <title>Find many elements by tag</title>
    <code language="java"><![CDATA[
// Using GWT
Document.get().getElementsByTagName("div").getItem(0);
// Using GWT with GXT 
DomQuery.select("div");
// Using GWT with GQuery
GQuery.$("div");
]]></code>
  </synonym>
  <synonym id="syn-find-one-element-by-name">
    <title>Find one element by name</title>
    <code language="java"><![CDATA[
// Using GWT with GXT
DomQuery.select("[name='form']").getItem(0);
// Using GWT with GQuery
GQuery.$("[name='form']").get(0);
]]></code>
  </synonym>
  <synonym id="syn-find-many-elements-by-name">
    <title>Find many elements by name</title>
    <code language="java"><![CDATA[
// Using GWT with GXT
DomQuery.select("[name='form']");
// Using GWT with GQuery
GQuery.$("[name='form']");
]]></code>
  </synonym>
  <synonym id="syn-find-elements-by-combination-of-above">
    <title>Find elements by combination of above</title>
    <code language="java"><![CDATA[
// Using GWT with GXT
DomQuery.select("#main div:first .visible");
// Using GWT with GQuery
GQuery.$("#main div:first-of-type .visible");
]]></code>
  </synonym>
  <synonym id="syn-iterate-over-a-list-of-elements">
    <title>Iterate over a list of elements</title>
    <code language="java"><![CDATA[
// Using GWT with GXT
NodeList<Element> elements = DomQuery.select(".visible");
for (int i=0; i < elements.getLength(); i++) {
  Element element = elements.getItem(i);
}

// Using GWT with GQuery
GQuery elements = GQuery.$(".visible");
for (int i = 0; i < elements.length(); i++) {
  Element element = elements.get(i);
}
]]></code>
  </synonym>
  <synonym id="syn-access-the-first-child">
    <title>Access the first child</title>
    <code language="java"><![CDATA[
// Using GWT with GXT
elements.getItem(0);
// Using GWT with GQuery
elements.get(0);
]]></code>
  </synonym>
  <synonym id="syn-find-out-whether-an-element-has-children-elements">
    <title>Find out whether an element has children elements</title>
    <code language="java"><![CDATA[
// Using GWT with GXT
elements.getLength() == 0
// Using GWT with GQuery
elements.length() == 0
]]></code>
  </synonym>
</theme>
<theme id="theme-manipulating-dom">
  <title>Manipulating DOM</title>
  <synonym id="syn-create-an-element">
    <title>Create an element</title>
    <code language="java"><![CDATA[
DivElement element = Document.get().createDivElement();
]]></code>
  </synonym>
  <synonym id="syn-create-an-element-and-set-its-contents">
    <title>Create an element and set its contents</title>
    <code language="java"><![CDATA[
DivElement element = Document.get().createDivElement();
element.setInnerHTML("<p>A quick brown <em>fox</em>.</p>");
]]></code>
  </synonym>
  <synonym id="syn-add-an-element-to-a-parent">
    <title>Add an element to a parent</title>
    <code language="java"><![CDATA[
Document.get().getBody().appendChild(element);
]]></code>
  </synonym>
  <synonym id="syn-remove-an-element-from-its-parent">
    <title>Remove an element from its parent</title>
    <code language="java"><![CDATA[
DivElement element = Document.get().createDivElement();
Document.get().getBody().appendChild(element);
element.removeFromParent();
]]></code>
  </synonym>
</theme>
<theme id="theme-regular-expressions">
  <title>Regular expressions</title>
  <synonym>
    <code language="java"><![CDATA[
String email = "test@example.com";
RegExp regExp = RegExp.compile("@");
MatchResult matcher = regExp.exec(email);
]]></code>
  </synonym>
  <synonym>
    <code language="java"><![CDATA[
String invalidEmail = "f@il@example.com";
RegExp regExp = RegExp.compile("(@)");
MatchResult matcher = regExp.exec(invalidEmail);
if (matcher != null) {
  for (int i = 0; i <= matcher.getGroupCount(); i++) {
    String group = matcher.getGroup(i);
  }
}
]]></code>
  </synonym>
</theme>
<theme id="theme-exceptions">
  <title>Exceptions</title>
  <synonym id="syn-throw-an-exception">
    <title>Throw an exception</title>
    <code language="java"><![CDATA[
throw new Exception("Intruder Alert!!");
]]></code>
  </synonym>
  <synonym id="syn-catch-an-exception">
    <title>Catch an exception</title>
    <code language="java"><![CDATA[
try {
  Integer.parseInt("three");
} catch (NumberFormatException e) {
  e.printStackTrace();
}
]]></code>
  </synonym>
</theme>
<theme id="theme-event-handling">
  <title>Event handling</title>
  <synonym id="syn-attach-an-event-handler">
    <title>Attach an event handler</title>
    <code language="java"><![CDATA[
// Using GWT
Element element = DOM.getElementById("main");
Event.sinkEvents(element, Event.ONCLICK);
DOM.setEventListener(element, new EventListener() {      
  @Override
  public void onBrowserEvent(Event event) {
    if (Event.ONCLICK == event.getTypeInt()) {
      System.out.println("clicked");
    }
  }
});
]]></code>
  </synonym>
  <synonym id="syn-remove-an-event-handler">
    <title>Remove an event handler</title>
    <code language="java"><![CDATA[
// Using GWT
DOM.setEventListener(getElement(), null);
]]></code>
  </synonym>
</theme>
<theme id="theme-timing">
  <title>Timing</title>
  <synonym id="syn-schedule-a-future-event">
    <title>Schedule a future event</title>
    <code language="java"><![CDATA[
Timer timer = new Timer() {
  @Override
  public void run() {
    System.out.print("the future is here");
  }
};
timer.schedule(1000);
]]></code>
  </synonym>
  <synonym id="syn-measure-the-execution-time-of-a-function">
    <title>Measure the execution time of a function</title>
    <code language="java"><![CDATA[
long watch = System.currentTimeMillis();
method();
long elapsed = System.currentTimeMillis() - watch;
System.out.println(elapsed);
]]></code>
  </synonym>
</theme>
<theme id="theme-html-attributes">
  <title>HTML attributes</title>
  <synonym id="syn-get-html-attribute">
    <title>Get HTML attribute</title>
    <code language="java"><![CDATA[
// Using GWT
element.getAttribute("href");
]]></code>
  </synonym>
  <synonym id="syn-set-html-attribute">
    <title>Set HTML attribute</title>
    <code language="java"><![CDATA[
// Using GWT
element.setAttribute("playable", "true");
]]></code>
  </synonym>
  <synonym id="syn-remove-html-attribute">
    <title>Remove HTML attribute</title>
    <code language="java"><![CDATA[
// Using GWT
element.removeAttribute("playable");
]]></code>
  </synonym>
  <synonym id="syn-check-if-html-attribute-exists">
    <title>Check if HTML attribute exists</title>
    <code language="java"><![CDATA[
// Using GWT      
element.hasAttribute("playable");
]]></code>
  </synonym>
</theme>
<theme id="theme-css-classes">
  <title>CSS classes</title>
  <synonym id="syn-add-css-class">
    <title>Add CSS class</title>
    <code language="java"><![CDATA[
// Using GWT      
element.setClassName("new-class");
]]></code>
  </synonym>
  <synonym id="syn-remove-css-class">
    <title>Remove CSS class</title>
    <code language="java"><![CDATA[
// Using GWT
element.removeClassName("new-class");
]]></code>
  </synonym>
</theme>
<theme id="theme-ajax">
  <title>Ajax</title>
  <synonym id="syn-request-data-via-xmlhttprequest">
    <title>Request data via XMLHttpRequest</title>
    <code language="java"><![CDATA[
// Using GWT      
RequestBuilder request = new RequestBuilder(RequestBuilder.GET, "/data.json");
request.setCallback(new RequestCallback() {
  @Override
  public void onResponseReceived(Request request, Response response) {
    System.out.println(response.getText());
  }
  
  @Override
  public void onError(Request request, Throwable exception) {
    exception.printStackTrace();
  }
});
]]></code>
  </synonym>
</theme>
<theme id="theme-jquery">
  <title>jQuery</title>
  <synonym id="syn-react-to-document-finishing-loading">
    <title>React to document finishing loading</title>
    <code language="java"><![CDATA[
// Using GWT
public class ProjectEntryPoint implements EntryPoint {
  @Override
  public void onModuleLoad() {
    System.out.println("loaded");
  }
}
]]></code>
  </synonym>
  <synonym id="syn-node-lookup">
    <title>Node lookup</title>
    <code language="java"><![CDATA[
// Using GWT with GXT
NodeList<Element> elements = DomQuery.select("#main");
// Using GWT with GQuery
GQuery elements = GQuery.$("#main");
]]></code>
  </synonym>
  <synonym id="syn-node-creation">
    <title>Node creation</title>
    <code language="java"><![CDATA[
//Using GWT
ImageElement pic = Document.get().createImageElement();
pic.addClassName("avatar");
pic.addClassName("main");
pic.setAttribute("src", "myPic.jpg");
Document.get().getBody().appendChild(pic);
]]></code>
  </synonym>
  <synonym id="syn-event-handling">
    <title>Event handling</title>
    <code language="java"><![CDATA[
// Using GWT
Element element = DOM.getElementById("main");
Event.sinkEvents(element, Event.ONCLICK);
DOM.setEventListener(element, new EventListener() {      
  @Override
  public void onBrowserEvent(Event event) {
    if (Event.ONCLICK == event.getTypeInt()) {
      System.out.println("clicked");
    }
  }
});
]]></code>
  </synonym>
  <synonym id="syn-relative-nodes">
    <title>Relative nodes</title>
    <code language="java"><![CDATA[
Element element = DOM.getElementById("main");
Node parent = element.getParentNode();
Node child = parent.getChild(0);
]]></code>
  </synonym>
  <synonym id="syn-children">
    <title>Children</title>
    <code language="java"><![CDATA[
Element element = DOM.getElementById("main");
NodeList<Node> children = element.getChildNodes();
]]></code>
  </synonym>
  <synonym id="syn-clone">
    <title>Clone</title>
    <code language="java"><![CDATA[
Element element = DOM.getElementById("main");
Node clonedElement = element.cloneNode(true);
]]></code>
  </synonym>
</theme>
<theme id="theme-math">
  <title>Math</title>
  <synonym id="syn-absolute-value">
    <title>Absolute value</title>
    <code language="java"><![CDATA[
Math.abs(-4) // == 4
]]></code>
  </synonym>
  <synonym id="syn-ceiling">
    <title>Ceiling</title>
    <code language="java"><![CDATA[
Math.ceil(4.89); // == 5.0
]]></code>
  </synonym>
  <synonym id="syn-floor">
    <title>Floor</title>
    <code language="java"><![CDATA[
Math.floor(4.89); // == 4.0
]]></code>
  </synonym>
  <synonym id="syn-random">
    <title>Random</title>
    <code language="java"><![CDATA[
Random rand = new Random();
rand.nextDouble();
rand.nextBoolean();
rand.nextInt();
]]></code>
  </synonym>
  <synonym id="syn-sine-and-cosine">
    <title>Sine and Cosine</title>
    <code language="java"><![CDATA[
Math.sin(Math.PI / 2); // == 1.0
Math.cos(Math.PI); // == -1.0
]]></code>
  </synonym>
  <synonym id="syn-convert-a-string-to-a-number">
    <title>Convert a String to a number</title>
    <code language="java"><![CDATA[
Integer.parseInt("3") // == 3
Double.parseDouble("3.14") // 3.14

Integer.parseInt("3px") // ERROR
Integer.parseInt("three") // ERROR
]]></code>
  </synonym>
</theme>
<theme id="theme-run-time-program-manipulation">
  <title>Run time program manipulation</title>
  <synonym id="syn-eval">
    <title>Eval</title>
    <code language="java"><![CDATA[
// Using GWT
public native JavaScriptObject eval(String json) /*-{
  return eval(json);
}-*/;
]]></code>
  </synonym>
  <synonym id="syn-adding-a-method-to-a-class">
    <title>Adding a method to a class</title>
    <code language="java"><![CDATA[
]]></code>
  </synonym>
</theme>
</synonyms>
